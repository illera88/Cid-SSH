#pragma once

#define _WIN32_WINNT 0x0501
#define ASIO_STANDALONE

#include <cstdlib>
#include <cstddef>
#include <iostream>
#include <string>

#include <memory>
#include <functional>
#include <mutex>
#include <random>



#include <websocketpp/server.hpp>
#include "proxy.h"


// ToDo: move the entire declaration of tcp_proxy here
void tcp_proxy::bridge::close() {
        mutex_.lock();
        if (downstream_socket_.is_open())
        {
            downstream_socket_.close();
        }

        if (upstream_socket_.is_open())
        {
            upstream_socket_.close();
        }
        mutex_.unlock();
        }


TCP_proxy::TCP_proxy(WebsocketsWrapper* ws_client, std::shared_ptr<asio::io_service> io) : io(io), ws_client_ptr(ws_client), listening_proxy_port(0)
{    
}


/* Returns the port in which the proxy server is listening*/
int TCP_proxy::start_proxy_server() {
    const std::string local_host = "127.0.0.1";

    int i = 0;
    while (i < 20) { // let's try 20 times to find an available port before returning error
        i++;
        unsigned short local_port;
#ifdef IS_DEBUG
        local_port = 6666;
#else
        std::random_device seeder;
        std::mt19937 engine(seeder());
        std::uniform_int_distribution<unsigned short> dist(1200, 65535);
        local_port = dist(engine);
#endif
        try
        {
            acceptor = std::make_shared<tcp_proxy::bridge::acceptor> (*io.get(),
                local_host, local_port,
                forward_host, forward_port);

            acceptor->accept_connections();

            listening_proxy_port = local_port;

            //ios.run();
            return local_port;
        }
        catch (std::exception& e)
        {
            std::cerr << "Error: " << e.what() << " Port " << local_port << "seems to be taken. Trying a different one" << std::endl;
            continue;
        }
    }

    return 0;

}

int TCP_proxy::stop_proxy_server() {
    io->stop();

    return 0;
}