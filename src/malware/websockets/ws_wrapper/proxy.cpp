#include <iostream>

#include <websocketpp/server.hpp>
#include "proxy.h"


// ToDo: move the entire declaration of tcp_proxy here
void tcp_proxy::bridge::close() {
        mutex_.lock();
        if (downstream_socket_.is_open())
        {
            downstream_socket_.close();
        }

        mutex_.unlock();
        }


TCP_proxy::TCP_proxy(WebsocketsWrapper* ws_client, std::shared_ptr<asio::io_service> io) : io(io), ws_client_ptr(ws_client)
{    
}


/* Returns the port in which the proxy server is listening*/
int TCP_proxy::start_proxy_server() {
    try
    {
        acceptor = std::make_shared<tcp_proxy::bridge::acceptor> (
            *io.get(),
            asio::ip::address_v4::loopback(), 0 /* use port 0 to have OS give us an open port */,
            ws_client_ptr);

        auto local_port = acceptor->local_endpoint().port();

        acceptor->accept_connections();
        return local_port;
    }
    catch (std::exception& e)
    {
        std::cerr << "Error: " << e.what() << std::endl;
        throw e;
    }

    return 0;

}

int TCP_proxy::stop_proxy_server() {
    io->stop();

    return 0;
}
