#pragma once

#define _WIN32_WINNT 0x0501
#define ASIO_STANDALONE

#include <cstdlib>
#include <cstddef>
#include <iostream>
#include <string>

#include <memory>
#include <functional>
#include <mutex>
#include <random>

#include "asio.hpp"

#include <websocketpp/server.hpp>

namespace tcp_proxy
{
    class bridge : public std::enable_shared_from_this<bridge>
    {
    public:

        typedef asio::ip::tcp::socket socket_type;
        typedef std::shared_ptr<bridge> ptr_type;

        bridge(asio::io_service& ios)
            : downstream_socket_(ios),
            upstream_socket_(ios)
        {}

        socket_type& downstream_socket()
        {
            // Client socket
            return downstream_socket_;
        }

        socket_type& upstream_socket()
        {
            // Remote server socket
            return upstream_socket_;
        }

        void start(const std::string& upstream_host, unsigned short upstream_port)
        {
            // Attempt connection to remote server (upstream side)
            upstream_socket_.async_connect(
                asio::ip::tcp::endpoint(
                    asio::ip::address::from_string(upstream_host),
                    upstream_port),
                std::bind(&bridge::handle_upstream_connect,
                    shared_from_this(),
                    std::placeholders::_1));
        }

        void handle_upstream_connect(const asio::error_code& error)
        {
            if (!error)
            {
                // Connected to SSH server
                // Setup async read from remote server (upstream)
                upstream_socket_.async_read_some(
                    asio::buffer(upstream_data_, max_data_length),
                    std::bind(&bridge::handle_upstream_read,
                        shared_from_this(),
                        std::placeholders::_1,
                        std::placeholders::_2));

                // Setup async read from client (downstream)
                downstream_socket_.async_read_some(
                    asio::buffer(downstream_data_, max_data_length),
                    std::bind(&bridge::handle_downstream_read,
                        shared_from_this(),
                        std::placeholders::_1,
                        std::placeholders::_2));
            }
            else{
                close();
            }
        }

    private:

        /*
           Section A: Remote Server --> Proxy --> Client
           Process data recieved from remote sever then send to client.
        */

        // Read from remote server complete, now send data to client
        void handle_upstream_read(const asio::error_code& error,
            const size_t& bytes_transferred)
        {
            if (!error)
            {
                async_write(downstream_socket_,
                    asio::buffer(upstream_data_, bytes_transferred),
                    std::bind(&bridge::handle_downstream_write,
                        shared_from_this(),
                        std::placeholders::_1));
            }
            else {
                auto a = error.message();
                std::cerr << "exception: " << error.message() << std::endl;
                close();
            }
        }

        // Write to client complete, Async read from remote server
        void handle_downstream_write(const asio::error_code& error)
        {
            if (!error)
            {
                upstream_socket_.async_read_some(
                    asio::buffer(upstream_data_, max_data_length),
                    std::bind(&bridge::handle_upstream_read,
                        shared_from_this(),
                        std::placeholders::_1,
                        std::placeholders::_2));
            }
            else{
                std::cerr << "handle_downstream_write() exception: " << error.message() << std::endl;
                close();
            }
        }
        // *** End Of Section A ***


        /*
           Section B: Client --> Proxy --> Remove Server
           Process data recieved from client then write to remove server.
        */

        // Read from client complete, now send data to remote server
        void handle_downstream_read(const asio::error_code& error,
            const size_t& bytes_transferred)
        {
            auto s = upstream_socket_.remote_endpoint().port();

            if (!error)
            {
                async_write(upstream_socket_,
                    asio::buffer(downstream_data_, bytes_transferred),
                    std::bind(&bridge::handle_upstream_write,
                        shared_from_this(),
                        std::placeholders::_1));
            }
            else {
                std::cerr << "handle_downstream_read() exception: " << error.message() << std::endl;
                close();
            }
        }

        // Write to remote server complete, Async read from client
        void handle_upstream_write(const asio::error_code& error)
        {
            if (!error)
            {
                auto buffer = asio::buffer(downstream_data_, max_data_length);
                downstream_socket_.async_read_some(
                    buffer,
                    std::bind(&bridge::handle_downstream_read,
                        shared_from_this(),
                        std::placeholders::_1,
                        std::placeholders::_2));
            }
            else {
                close();
            }
        }
        // *** End Of Section B ***

        void close()
        {
            mutex_.lock();
            if (downstream_socket_.is_open())
            {
                downstream_socket_.close();
            }

            if (upstream_socket_.is_open())
            {
                upstream_socket_.close();
            }
            mutex_.unlock();
        }

        socket_type downstream_socket_;
        socket_type upstream_socket_;

        enum { max_data_length = 8192 }; //8KB
        unsigned char downstream_data_[max_data_length] = { 0 };
        unsigned char upstream_data_[max_data_length] = { 0 };

        std::mutex mutex_;

    public:

        class acceptor
        {
        public:

            acceptor(asio::io_service& io_service)
                : io_service_(io_service),
                upstream_port_(2222),
                upstream_host_("127.0.0.1")
            {}

            bool accept_connections()
            {
                try
                {
                    session_ = std::shared_ptr<bridge>(new bridge(io_service_));

                    session_->start(upstream_host_, upstream_port_);

                    //asio::ip::tcp::socket a = session_->downstream_socket();

                   /* ws_server->async_accept(websocketpp::lib::static_pointer_cast<ws_proxy::server>(ws_server->get_connection()),
                        bind(&acceptor::handle_accept, this, std::placeholders::_1, std::placeholders::_2));*/

                    /*acceptor_.async_accept(session_->downstream_socket(),
                        std::bind(&acceptor::handle_accept,
                            this,
                            std::placeholders::_1,
                            std::placeholders::_2));*/
                }
                catch (std::exception& e)
                {
                    std::cerr << "acceptor exception: " << e.what() << std::endl;
                    return false;
                }

                return true;
            }

        //private:

            /*void handle_accept()
            {
                if (!error)
                {
                    session_ = std::shared_ptr<bridge>(new bridge(io_service_));
                    session_->start(upstream_host_, upstream_port_);

                    if (!accept_connections())
                    {
                        std::cerr << "Failure during call to accept." << std::endl;
                    }
                }
                else
                {
                    std::cerr << "Error: " << error.message() << std::endl;
                }
            }*/

            asio::io_service& io_service_;
            ptr_type session_;
            unsigned short upstream_port_;
            std::string upstream_host_;
        };

    };
}

