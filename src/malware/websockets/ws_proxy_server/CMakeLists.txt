cmake_minimum_required(VERSION 3.13)

set(WS_PROXY_SERVER_SOURCE_FILES 
		ws_proxy_server.cpp
	)

set(WS_PROXY_SERVER_HEADER_FILES 
	ws_proxy_server.h
    tcp_proxy.h
)

add_executable(ws_proxy_server ${WS_PROXY_SERVER_SOURCE_FILES} ${WS_PROXY_SERVER_HEADER_FILES})

target_include_directories(ws_proxy_server PRIVATE "../externals/asio/asio/include/")
target_include_directories(ws_proxy_server PRIVATE "../externals/websocketpp/")

set_property(TARGET ws_proxy_server PROPERTY CXX_STANDARD 11)
set_property(TARGET ws_proxy_server PROPERTY CXX_STANDARD_REQUIRED ON)


if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
target_link_libraries(ws_proxy_server ${LIBSSL_LIBRARY})
target_link_libraries(ws_proxy_server ${LIBCRYPTO_LIBRARY})
target_link_libraries(ws_proxy_server Ws2_32.lib Crypt32.lib)

target_include_directories(ws_proxy_server PRIVATE "${LIBSSL_INCLUDE_DIR}")

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /MP")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MT /MP -DIS_DEBUG")

elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
target_link_libraries(ws_proxy_server "-lcrypto")

target_include_directories(ws_proxy_server PRIVATE "${LIBSSH_CONFIG_FOLDER}")
target_include_directories(ws_proxy_server PRIVATE "${LIBSSH_INCLUDE}")
endif()