cmake_minimum_required(VERSION 3.13)

set(OPENSSL_USE_STATIC_LIBS TRUE)
include(FindOpenSSL)

set(CidSSH_SOURCE_FILES 
    CidSSH.cpp
    server.cpp
    sts_queue.c
    socks_proxy.c
    client.cpp
)

SET(CidSSH_HEADER_FILES
    server.h
    sts_queue.h
    socks_proxy.h
    global.h
    client.h
	
)

set(Websockets_SOURCE_FILES 
)

set(Websockets_HEADER_FILES 
)

if (${CID_WEBSOCKETS})
	set(Websockets_SOURCE_FILES 
		websockets/ws_wrapper/cid_websockets.cpp
	)

	set(Websockets_HEADER_FILES 
		websockets/ws_wrapper/cid_websockets.h
	)
endif()

add_executable(CidSSH ${CidSSH_SOURCE_FILES} ${CidSSH_HEADER_FILES} ${Websockets_SOURCE_FILES} ${Websockets_HEADER_FILES})
add_dependencies(CidSSH libssh_builder)
target_include_directories(CidSSH PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/..)
target_include_directories(CidSSH PRIVATE ${LIBSSH_INCLUDE_DIR})
target_include_directories(CidSSH PRIVATE ${OPENSSL_INCLUDE_DIR})
target_link_libraries(CidSSH libssh)
target_link_libraries(CidSSH ssl)
target_link_libraries(CidSSH crypto)

set_property(TARGET CidSSH PROPERTY CXX_STANDARD 17)
set_property(TARGET CidSSH PROPERTY CXX_STANDARD_REQUIRED ON)

if (${CID_WEBSOCKETS})
	target_compile_definitions(CidSSH PRIVATE "-DCID_WEBSOCKETS")
	target_include_directories(CidSSH PRIVATE "websockets/externals/asio/asio/include/")
	target_include_directories(CidSSH PRIVATE "websockets/externals/websocketpp/")
endif()

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    target_link_libraries(CidSSH Ws2_32.lib Crypt32.lib)

    target_include_directories(CidSSH PRIVATE "${LIBSSH_INCLUDE_DIR}")

    target_compile_definitions (CidSSH PUBLIC _CRT_SECURE_NO_WARNINGS _WINSOCK_DEPRECATED_NO_WARNINGS LIBSSH_STATIC)
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT /MP")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MT /MP -DIS_DEBUG")
    set(CMAKE_CXX_STACK_SIZE 5000000) # 5x default stack size to prevent libssh stack exhaustion due to recursion problem

elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    target_link_libraries(CidSSH "-lutil")

    if(${CMAKE_BUILD_TYPE} MATCHES "Debug") # Non static version, to compile in ubuntu without problems
        target_link_libraries(CidSSH "-lpthread")
        target_link_libraries(CidSSH "-ldl")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -ggdb -fsanitize=address -lasan -static-libasan")
        target_compile_definitions(CidSSH PRIVATE "-DIS_DEBUG")
    else() #Static version
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static -static-libgcc -static-libstdc++ -s")
    endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    target_link_libraries(CidSSH "/usr/local/opt/openssl/lib/libcrypto.a")
    target_link_libraries(CidSSH "-lutil")
    target_link_libraries(CidSSH "-lpthread")

    if(${CMAKE_BUILD_TYPE} MATCHES "Debug") 
        target_compile_definitions(CidSSH PRIVATE "-DIS_DEBUG")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -ggdb -fsanitize=address")
    endif()
endif()

if (DEFINED PASSWORD_AUTH)
    target_compile_definitions(CidSSH PRIVATE "-DPASSWORD_AUTH=\"${PASSWORD_AUTH}\"") 
endif()

if (DEFINED C2_IP)
    target_compile_definitions(CidSSH PRIVATE "-DC2_IP=\"${C2_IP}\"") 
endif()

