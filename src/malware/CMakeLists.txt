set(OPENSSL_USE_STATIC_LIBS TRUE)
set(OPENSSL_MSVC_STATIC_RT TRUE)
include(FindOpenSSL)

# Add Multi-processor compilation
if(MSVC)
  add_definitions(/MP)
endif()

set(CidSSH_SOURCE_FILES 
    CidSSH.cpp
    server.cpp
    sts_queue.c
    socks_proxy.c
    client.cpp
)

SET(CidSSH_HEADER_FILES
    server.h
    sts_queue.h
    socks_proxy.h
    global.h
    client.h
	
)

add_executable(CidSSH ${CidSSH_SOURCE_FILES} ${CidSSH_HEADER_FILES})
add_dependencies(CidSSH libssh_builder)

target_compile_definitions(CidSSH PRIVATE LIBSSH_STATIC "$<$<CONFIG:DEBUG>:IS_DEBUG>")
target_include_directories(CidSSH PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/..)
target_include_directories(CidSSH PRIVATE ${LIBSSH_INCLUDE_DIR})
target_include_directories(CidSSH PRIVATE ${OPENSSL_INCLUDE_DIR})

set_property(TARGET CidSSH PROPERTY CXX_STANDARD 17)
set_property(TARGET CidSSH PROPERTY CXX_STANDARD_REQUIRED ON)

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    target_link_libraries(CidSSH Ws2_32.lib)
    set_target_properties(CidSSH PROPERTIES MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
    target_compile_definitions (CidSSH PUBLIC _CRT_SECURE_NO_WARNINGS _WINSOCK_DEPRECATED_NO_WARNINGS LIBSSH_STATIC _WIN32_WINNT=0x0A00)
    set(CMAKE_CXX_STACK_SIZE 5000000) # 5x default stack size to prevent libssh stack exhaustion due to recursion problem
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    set_target_properties(CidSSH PROPERTIES LINK_SEARCH_START_STATIC 1)
    set_target_properties(CidSSH PROPERTIES LINK_SEARCH_END_STATIC 1)
    set(CMAKE_FIND_LIBRARY_SUFFIXES ".a")

    if(${CMAKE_BUILD_TYPE} MATCHES "Debug") # Non static version, to compile in ubuntu without problems
        target_link_libraries(CidSSH "-ldl")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -ggdb -fsanitize=address -lasan -static-libasan")
    else() #Static version
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static -static-libgcc -static-libstdc++ -s")
    endif()
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    if(${CMAKE_BUILD_TYPE} MATCHES "Debug") 
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -glldb -g -fsanitize=address -fstandalone-debug")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -glldb -g -fsanitize=address -fstandalone-debug")
    endif()
endif()

# Find libraries after we set the LINK_SEARCH_STATIC property
target_link_libraries(CidSSH libssh)
target_link_libraries(CidSSH OpenSSL::SSL)
target_link_libraries(CidSSH OpenSSL::Crypto)

if (${WITH_WEBSOCKETS})
    target_link_libraries(CidSSH WebsocketsWrapper)
    target_compile_definitions(CidSSH PRIVATE CID_WEBSOCKETS)
endif()

if (DEFINED PASSWORD_AUTH)
    target_compile_definitions(CidSSH PRIVATE "-DPASSWORD_AUTH=\"${PASSWORD_AUTH}\"") 
endif()

if (DEFINED C2_IP)
    target_compile_definitions(CidSSH PRIVATE "-DC2_IP=\"${C2_IP}\"") 
endif()
