#pragma once

#include <libssh/libssh.h>

#include "global.h"
#include "CidSSHServer.h"

#include <chrono>
#include <map>
#include <memory>
#include <thread>
#include <atomic>

class C2Connection
{
private:
    unsigned int localSSHPort_;
    pthread_mutex_t* mutex_;
    ssh_session session_;
    ssh_channel channel_;
    std::chrono::time_point<std::chrono::system_clock>* last_keep_alive_;
    std::atomic<Termination_type>* operatorOrderedTermination_;
    std::map<std::thread::id, C2Connection*>* active_connections_;

public:
    C2Connection(ssh_session session,
        ssh_channel channel,
        unsigned int localSSHPort,
        pthread_mutex_t* mutex,
        std::chrono::time_point<std::chrono::system_clock>* last_keep_alive,
        std::atomic<Termination_type>* operatorOrderedTermination,
        std::map<std::thread::id, C2Connection*>* active_connections
    )
        : session_(session)
        , channel_(channel)
        , localSSHPort_(localSSHPort)
        , mutex_(mutex)
        , last_keep_alive_(last_keep_alive)
        , operatorOrderedTermination_(operatorOrderedTermination)
        , active_connections_(active_connections)
    {}

    void remote_forwading_thread();

private:

    int do_remote_forwarding_loop();
    int connect_to_local_service(const unsigned int localSSHPort);
};

